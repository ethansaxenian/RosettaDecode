auto
break
case
char
continue
default
do
double
else
entry
extern
float
for
goto
if
int
long
register
return
short
sizeof
static
struct
switch
typedef
union
unsigned
void
volatile
while
const
enum
signed
void
volatile
auto
break
case
char
none
continue
default
do
double
else
entry
extern
float
for
goto
if
int
long
register
return
short
sizeof
static
struct
switch
typedef
union
unsigned
void
volatile
while
asm
bool
catch
class
const_cast
delete
dynamic_cast
explicit
false
friend
inline
mutable
namespace
new
operator
private
public
protected
reinterpret_cast
static_cast
template
this
throw
true
try
typeid
typename
using
virtual
wchar_t
and
and_eq
bitand
bitor
compl
not
not_eq
or
or_eq
xor
xor_eq
cin
cout
endl
include
INT_MIN
INT_MAX
iomanip
iostream
main
MAX_RAND
npos
NULL
std
string
break
case
chan
const
continue
default
defer
else
fallthrough
for
func
go
goto
if
import
interface
map
package
range
return
select
struct
switch
type
var
as
case
of
class
data
data
family
data
instance
default
deriving
deriving
instance
do
forall
foreign
hiding
if
then
else
import
infix
infixl
infixr
instance
let
in
mdo
module
newtype
proc
qualified
rec
type
type
family
type
instance
where
abstract
assert
boolean
break
byte
case
catch
char
class
const
continue
default
do
double
else
enum
extends
final
finally
float
for
goto
if
implement
imports
instanceof
int
interface
long
native
new
package
private
protected
public
return
short
static
strictfp
super
switch
synchronized
this
throw
throws
transient
try
void
volatile
while
false
null
true
abstract
arguments
boolean
break
byte
case
catch
char
class
const
continue
debugger
default
delete
do
double
else
enum
eval
export
extends
false
final
finally
float
for
function
goto
if
implements
import
in
instanceof
int
interface
let
long
native
new
null
package
private
protected
public
return
short
static
super
switch
synchronized
this
throw
throws
transient
true
try
typeof
var
void
volatile
while
with
yield
and
assert
break
class
continue
def
del
elif
else
except
exec
finally
for
from
global
if
import
in
is
lambda
not
or
pass
print
raise
return
try
while
_ENCODING_
_LINE_
_FILE_
BEGIN
END
alias
and
begin
break
case
class
def
defined?
do
else
elsif
end
ensure
false
for
if
in
module
next
nil
not
or
redo
rescue
retry
return
self
super
then
true
undef
unless
until
when
while
yield
auto
break
case
const
continue
default
do
else
enum
extern
for
goto
if
register
restricted
return
sizeof
static
struct
switch
typedef
union
volatile
while
__asm
__assume
__based
__cdecl
__declspec
__except
__fastcall
__finally
__forceinline
__identifier
__inline
__int16
__int32
__int64
__int8
__leave
__m128
__m128d
__m128i
__m64
__naked
__noop
__raise
__restrict
__stdcall
__thread
__try
__typename
__unaligned
__w64
__wchar_t
inline
naked
restrict
thread
typename
*_t
bool
char
double
float
int
long
short
signed
unsigned
void
asm
auto
break
case
catch
const
const_cast
continue
default
delete
do
dynamic_cast
else
enum
explicit
export
extern
for
friend
goto
if
mutable
namespace
new
operator
private
protected
public
register
reinterpret_cast
restrict
restricted
return
sizeof
static
static_cast
struct
switch
template
this
throw
throws
typedef
typeid
typename
union
using
virtual
volatile
while
inline
naked
restrict
thread
typename
bool
char
double
float
int
long
short
signed
unsigned
void
bool
byte
complex128
complex64
error
float
float32
float64
int
int16
int32
int64
int8
rune
string
uint
uint16
uint32
uint64
uint8
uintptr
import
package
break
case
continue
default
defer
else
fallthrough
for
go
goto
if
range
return
select
switch
chan
const
func
interface
map
struct
type
var
false
iota
nil
true
case
class
data
default
deriving
do
else
if
in
infix
infixl
infixr
instance
let
newtype
of
then
type
where
qualified
boolean
byte
char
double
float
int
long
short
void
assert
break
case
catch
continue
default
do
else
finally
for
goto
if
instanceof
new
return
switch
this
throw
try
while
abstract
const
enum
extends
final
implements
native
private
protected
public
static
strictfp
super
synchronized
throws
transient
volatile
false
null
true
abstract
assert
boolean
break
byte
case
catch
char
class
const
continue
default
do
double
else
enum
extends
false
final
finally
float
for
goto
if
implements
import
instanceof
int
interface
long
native
new
null
package
private
protected
public
return
short
static
strictfp
super
switch
synchronized
this
throw
throws
transient
true
try
void
volatile
while
abstract
boolean
byte
char
class
const
debugger
double
enum
export
extends
final
float
goto
implements
import
int
interface
long
native
package
private
protected
public
short
static
super
synchronized
throws
transient
volatile
Infinity
NaN
false
null
true
undefined
Any
Bool
Complex128
Complex64
Float32
Float64
Int
Int16
Int32
Int64
Int8
None
Nothing
Uint
Uint16
Uint32
Uint64
Uint8
baremodule
begin
bitstype
break
catch
ccall
continue
do
else
elseif
end
export
for
if
import
importall
in
let
macro
module
quote
return
try
using
while
const
global
local
BEGIN
CHECK
END
INIT
case
continue
do
else
elsif
for
foreach
if
last
my
new
next
our
print
redo
reset
return
then
unless
until
use
while
False
None
True
as
assert
break
continue
del
elif
else
except
finally
for
global
if
lambda
nonlocal
pass
raise
return
try
while
with
BEGIN
END
__ENCODING__
__END__
__FILE__
__LINE__
alias
and
begin
break
case
class
def
defined?
do
else
elsif
end
ensure
false
for
if
in
module
next
nil
not
or
redo
rescue
retry
return
self
super
then
true
undef
unless
until
when
while
yield
